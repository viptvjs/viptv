{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AACA,+BAA+B;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAA;AAC9C,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AACjE,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AACnC,OAAO,EAAE,GAAG,EAAE,MAAM,KAAK,CAAA;AACzB,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAA;AAC3C,OAAO,EACL,mBAAmB,EACnB,iBAAiB,EACjB,cAAc,GACf,MAAM,kBAAkB,CAAA;AAEzB,MAAM,GAAG,GAAG,GAAG,CAAC,WAAW,CAAC,CAAA;AAE5B,GAAG;KACA,OAAO,CAAC,OAAO,EAAE,sBAAsB,CAAC;KACxC,KAAK,CACJ,uEAAuE,CACxE;KACA,OAAO,CAAC,MAAM,CAAC;IAChB,kEAAkE;KACjE,MAAM,CAAC,KAAK,EAAE,YAAoB,EAAE,EAAyB,EAAE;IAC9D,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;IAC9B,MAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,CAAC,CAAA;IAC7C,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,CAAA;IAEhD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;QAC1B,OAAO,IAAI,KAAK,CAAC,4BAA4B,SAAS,IAAI,aAAa,EAAE,CAAC,CAAA;IAE5E,MAAM,cAAc,GAAG,iBAAiB,EAAE,CAAA;IAE1C,mBAAmB,CAAC,cAAc,CAAC,CAAA;IAEnC,MAAM,OAAO,GAAG,YAAY,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAA;IAEhE,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAM5C,CAAA;IAED,MAAM,OAAO,CAAC,GAAG,CAAC;QAChB,kBAAkB,CAAC,YAAY;YAC7B,CAAC,CAAC,cAAc,CAAC,cAAc,EAAE,kBAAkB,CAAC,YAAY,CAAC;YACjE,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE;QACrB,kBAAkB,CAAC,eAAe;YAChC,CAAC,CAAC,cAAc,CAAC,cAAc,EAAE,kBAAkB,CAAC,eAAe,CAAC;YACpE,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE;KACtB,CAAC,CAAA;IAEF,aAAa,CACX,WAAW,EACX,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CACnD,CAAA;IAED,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;IAE/B,SAAS,CAAC,GAAG,cAAc,UAAU,EAAE;QACrC,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,SAAS;KACjB,CAAC,CAAA;IAEF,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;IAEjC,SAAS,CACP,cAAc,KAAK,MAAM;QACvB,CAAC,CAAC,aAAa;QACf,CAAC,CAAC,cAAc,KAAK,OAAO;YAC1B,CAAC,CAAC,cAAc;YAChB,CAAC,CAAC,cAAc,KAAK,MAAM;gBACzB,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC,cAAc,KAAK,KAAK;oBACxB,CAAC,CAAC,YAAY;oBACd,CAAC,CAAC,YAAY,EACtB;QACE,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,SAAS;KACjB,CACF,CAAA;AACH,CAAC,CAAC,CAAA;AAEJ,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACb;QACE,KAAK,EACH,uEAAuE;QACzE,IAAI,EAAE,+BAA+B;KACtC;CACF,CAAC,CAAA;AAEF,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;AAEpB,GAAG,CAAC,KAAK,EAAE,CAAA","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\nimport { spawnSync } from 'node:child_process'\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs'\nimport { resolve } from 'node:path'\nimport { cac } from 'cac'\nimport { VERSION } from './config/index.js'\nimport {\n  checkTaobaoRegistry,\n  getPackageManager,\n  updatePackages,\n} from './utils/index.js'\n\nconst cli = cac('vt-update')\n\ncli\n  .command('[dir]', 'Update VIPTV project')\n  .usage(\n    'pnpm dlx vt-update [dir] / npx vt-update [dir] / bunx vt-update [dir]',\n  )\n  .example('docs')\n  // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n  .action(async (targetDir: string = ''): Promise<Error | void> => {\n    console.log('Bumping deps...')\n    const dir = resolve(process.cwd(), targetDir)\n    const packageJSON = resolve(dir, 'package.json')\n\n    if (!existsSync(packageJSON))\n      return new Error(`No package.json found in ${targetDir || 'current dir'}`)\n\n    const packageManager = getPackageManager()\n\n    checkTaobaoRegistry(packageManager)\n\n    const content = readFileSync(packageJSON, { encoding: 'utf-8' })\n\n    const packageJSONContent = JSON.parse(content) as Record<\n      string,\n      unknown\n    > & {\n      dependencies?: Record<string, string>\n      devDependencies?: Record<string, string>\n    }\n\n    await Promise.all([\n      packageJSONContent.dependencies\n        ? updatePackages(packageManager, packageJSONContent.dependencies)\n        : Promise.resolve(),\n      packageJSONContent.devDependencies\n        ? updatePackages(packageManager, packageJSONContent.devDependencies)\n        : Promise.resolve(),\n    ])\n\n    writeFileSync(\n      packageJSON,\n      `${JSON.stringify(packageJSONContent, null, 2)}\\n`,\n    )\n\n    console.info('Install deps...')\n\n    spawnSync(`${packageManager} install`, {\n      shell: true,\n      stdio: 'inherit',\n    })\n\n    console.info('Upgrading deps...')\n\n    spawnSync(\n      packageManager === 'pnpm'\n        ? `pnpm update`\n        : packageManager === 'yarn1'\n          ? `yarn upgrade`\n          : packageManager === 'yarn'\n            ? `yarn up`\n            : packageManager === 'bun'\n              ? `bun update`\n              : `npm update`,\n      {\n        shell: true,\n        stdio: 'inherit',\n      },\n    )\n  })\n\ncli.help(() => [\n  {\n    title:\n      'pnpm dlx vt-update [dir] / npx vt-update [dir] / bunx vt-update [dir]',\n    body: 'Update VIPTV project in [dir]',\n  },\n])\n\ncli.version(VERSION)\n\ncli.parse()"]}