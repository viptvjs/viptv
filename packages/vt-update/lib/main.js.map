{"version":3,"sources":["../src/main.ts","../src/config/packages.ts","../src/config/version.ts","../src/utils/registry.ts","../src/utils/packageManager.ts","../src/utils/getVersion.ts","../src/utils/updatePackage.ts"],"sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\nimport { spawnSync } from 'node:child_process'\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs'\nimport { resolve } from 'node:path'\nimport { cac } from 'cac'\nimport { VERSION } from './config/index.js'\nimport {\n  checkTaobaoRegistry,\n  getPackageManager,\n  updatePackages,\n} from './utils/index.js'\n\nconst cli = cac('vt-update')\n\ncli\n  .command('[dir]', 'Update VIPTV project')\n  .usage(\n    'pnpm dlx vt-update [dir] / npx vt-update [dir] / bunx vt-update [dir]',\n  )\n  .example('docs')\n  // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n  .action(async (targetDir: string = ''): Promise<Error | void> => {\n    console.log('Bumping deps...')\n    const dir = resolve(process.cwd(), targetDir)\n    const packageJSON = resolve(dir, 'package.json')\n\n    if (!existsSync(packageJSON))\n      return new Error(`No package.json found in ${targetDir || 'current dir'}`)\n\n    const packageManager = getPackageManager()\n\n    checkTaobaoRegistry(packageManager)\n\n    const content = readFileSync(packageJSON, { encoding: 'utf-8' })\n\n    const packageJSONContent = JSON.parse(content) as Record<\n      string,\n      unknown\n    > & {\n      dependencies?: Record<string, string>\n      devDependencies?: Record<string, string>\n    }\n\n    await Promise.all([\n      packageJSONContent.dependencies\n        ? updatePackages(packageManager, packageJSONContent.dependencies)\n        : Promise.resolve(),\n      packageJSONContent.devDependencies\n        ? updatePackages(packageManager, packageJSONContent.devDependencies)\n        : Promise.resolve(),\n    ])\n\n    writeFileSync(\n      packageJSON,\n      `${JSON.stringify(packageJSONContent, null, 2)}\\n`,\n    )\n\n    console.info('Install deps...')\n\n    spawnSync(`${packageManager} install`, {\n      shell: true,\n      stdio: 'inherit',\n    })\n\n    console.info('Upgrading deps...')\n\n    spawnSync(\n      packageManager === 'pnpm'\n        ? `pnpm update`\n        : packageManager === 'yarn1'\n          ? `yarn upgrade`\n          : packageManager === 'yarn'\n            ? `yarn up`\n            : packageManager === 'bun'\n              ? `bun update`\n              : `npm update`,\n      {\n        shell: true,\n        stdio: 'inherit',\n      },\n    )\n  })\n\ncli.help(() => [\n  {\n    title:\n      'pnpm dlx vt-update [dir] / npx vt-update [dir] / bunx vt-update [dir]',\n    body: 'Update VIPTV project in [dir]',\n  },\n])\n\ncli.version(VERSION)\n\ncli.parse()","export const VUE_RELATED_PACKAGES = [\n  '@vue/compiler-core',\n  '@vue/compiler-dom',\n  '@vue/compiler-sfc',\n  '@vue/compiler-ssr',\n  '@vue/devtools-api',\n  '@vue/reactivity',\n  '@vue/reactivity-transform',\n  '@vue/runtime-core',\n  '@vue/runtime-dom',\n  '@vue/server-renderer',\n  '@vue/shared',\n  'vue',\n  'vue-router',\n]\n\nexport const OFFICIAL_PACKAGES = [\n  '@vuepress/bundler-vite',\n  '@vuepress/bundler-webpack',\n  'vuepress',\n]\n\nexport const OFFICIAL_PLUGINS_AND_THEMES_REGEXP =\n  /^@vuepress\\/(?:plugin|theme)-/\n\nexport const REMOVED_PACKAGES = ['vuepress-webpack', 'vuepress-vite']\n\nexport const DEPRECATED_PACKAGES = [\n  '@vuepress/cli',\n  '@vuepress/client',\n  '@vuepress/core',\n  '@vuepress/markdown',\n  '@vuepress/shared',\n  '@vuepress/utils',\n]\n\nexport const THIRD_PARTY_PLUGINS = /^(@.*\\/)?vuepress-plugin-/\n\nexport const THIRD_PARTY_THEMES = /^(@.*\\/)?vuepress-theme-/","import { createRequire } from 'node:module'\n\nexport const VERSION = (\n  createRequire(import.meta.url)('vt-update/package.json') as {\n    version: string\n  }\n).version","/* eslint-disable no-console */\nimport { spawnSync } from 'node:child_process'\nimport type { PackageManager } from './packageManager.js'\n\nconst NPM_MIRROR_REGISTRY = 'https://registry.npmmirror.com/'\n\nexport const getRegistry = (packageManager: PackageManager): string => {\n  if (\n    packageManager === 'yarn' &&\n    !spawnSync(`${packageManager} --version`, {\n      shell: true,\n    })\n      .stdout.toString()\n      .startsWith('1')\n  )\n    return spawnSync(`${packageManager} config get npmRegistryServer`, {\n      shell: true,\n    })\n      .stdout.toString()\n      .trim()\n      .replace(/\\/?$/, '/')\n\n  if (\n    packageManager === 'bun' &&\n    !spawnSync(`${packageManager} --version`, {\n      shell: true,\n    }).status\n  ) {\n    console.warn(\n      'bun does not support get registry at the time, using npm global registry instead',\n    )\n    return spawnSync(\n      // TODO: wait for bun to support get registry config\n      `npm config get registry`,\n      { shell: true },\n    )\n      .stdout.toString()\n      .trim()\n      .replace(/\\/?$/, '/')\n  }\n\n  return spawnSync(`${packageManager} config get registry`, {\n    shell: true,\n  })\n    .stdout.toString()\n    .trim()\n    .replace(/\\/?$/, '/')\n}\n\nexport const checkTaobaoRegistry = (packageManager: PackageManager): void => {\n  const userRegistry = getRegistry(packageManager)\n\n  if (/https:\\/\\/registry\\.npm\\.taobao\\.org\\/?/.test(userRegistry)) {\n    console.error(\n      'npm.taobao.org is no longer available, resetting it to npmmirror.com',\n    )\n\n    if (packageManager === 'yarn') {\n      spawnSync(\n        `${packageManager} config set npmRegistryServer  ${NPM_MIRROR_REGISTRY}`,\n        { shell: true },\n      )\n    } else if (packageManager === 'bun') {\n      spawnSync(`npm config set registry ${NPM_MIRROR_REGISTRY}`, {\n        shell: true,\n      })\n    } else {\n      spawnSync(\n        `${packageManager} config set registry ${NPM_MIRROR_REGISTRY}`,\n        { shell: true },\n      )\n    }\n  }\n}","import { spawnSync } from 'node:child_process'\nimport { existsSync, readFileSync } from 'node:fs'\nimport { dirname, resolve } from 'node:path'\n\nexport type PackageManager = 'bun' | 'npm' | 'pnpm' | 'yarn' | 'yarn1'\n\nconst globalCache = new Map<string, boolean>()\nconst localCache = new Map<string, PackageManager>()\n\nconst PACKAGE_CONFIG = 'package.json'\nconst NPM_LOCK = 'package-lock.json'\nconst YARN_LOCK = 'yarn.lock'\nconst PNPM_LOCK = 'pnpm-lock.yaml'\nconst BUN_LOCK = 'bun.lockb'\n\nconst isInstalled = (packageManager: PackageManager): boolean => {\n  try {\n    const bin = packageManager === 'yarn1' ? 'yarn' : packageManager\n\n    const result = spawnSync(`${bin} --version`, {\n      shell: true,\n    })\n\n    if (packageManager === 'yarn1')\n      return result.stdout.toString().startsWith('1')\n\n    return result.status === 0\n  } catch {\n    return false\n  }\n}\n\n/**\n * Check if a package manager is installed globally.\n *\n * @param packageManager package manager\n */\nexport const isPackageManagerInstalled = (\n  packageManager: PackageManager,\n): boolean => {\n  const key = `global:${packageManager}`\n\n  const status = globalCache.get(key)\n\n  if (status !== undefined) return status\n\n  if (isInstalled(packageManager)) {\n    globalCache.set(key, true)\n\n    return true\n  }\n\n  return false\n}\n\n/**\n * Get package manager setting in package.json\n *\n * @param cwd current working directory\n * @param deep whether to search in parent directories\n * @returns the type of lock file\n */\nexport const getPackageManagerSetting = (\n  cwd = process.cwd(),\n  deep = true,\n): PackageManager | null => {\n  const key = `package:${cwd}`\n\n  const status = localCache.get(key)\n\n  if (status !== undefined) return status\n\n  if (existsSync(resolve(cwd, PACKAGE_CONFIG))) {\n    const { packageManager: packageManagerSettings } = JSON.parse(\n      readFileSync(resolve(cwd, PACKAGE_CONFIG), 'utf-8'),\n    ) as Record<string, unknown> & { packageManager?: string }\n\n    if (packageManagerSettings) {\n      const packageManager = packageManagerSettings.split(\n        '@',\n      )[0] as PackageManager\n\n      localCache.set(key, packageManager)\n\n      return packageManager\n    }\n  }\n\n  if (deep) {\n    let dir = cwd\n\n    while (dir !== dirname(dir)) {\n      dir = dirname(dir)\n\n      if (existsSync(resolve(cwd, PACKAGE_CONFIG))) {\n        const { packageManager: packageManagerSettings } = JSON.parse(\n          readFileSync(resolve(cwd, PACKAGE_CONFIG), 'utf-8'),\n        ) as Record<string, unknown> & { packageManager?: string }\n\n        if (packageManagerSettings) {\n          const packageManager = packageManagerSettings.split(\n            '@',\n          )[0] as PackageManager\n\n          localCache.set(key, packageManager)\n\n          return packageManager\n        }\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Get the type of lock file.\n *\n * @param cwd current working directory\n * @param deep whether to search in parent directories\n * @returns the type of lock file\n */\nexport const getTypeofLockFile = (\n  cwd = process.cwd(),\n  deep = true,\n): PackageManager | null => {\n  const key = `local:${cwd}`\n\n  const status = localCache.get(key)\n\n  if (status !== undefined) return status\n\n  if (existsSync(resolve(cwd, PNPM_LOCK))) {\n    localCache.set(key, 'pnpm')\n\n    return 'pnpm'\n  }\n\n  if (existsSync(resolve(cwd, YARN_LOCK))) {\n    const packageManager = readFileSync(resolve(cwd, YARN_LOCK), {\n      encoding: 'utf-8',\n    }).includes('yarn lockfile v1')\n      ? 'yarn1'\n      : 'yarn'\n\n    localCache.set(key, packageManager)\n\n    return packageManager\n  }\n\n  if (existsSync(resolve(cwd, BUN_LOCK))) {\n    localCache.set(key, 'bun')\n\n    return 'bun'\n  }\n\n  if (existsSync(resolve(cwd, NPM_LOCK))) {\n    localCache.set(key, 'npm')\n\n    return 'npm'\n  }\n\n  if (deep) {\n    let dir = cwd\n\n    while (dir !== dirname(dir)) {\n      dir = dirname(dir)\n\n      if (existsSync(resolve(dir, PNPM_LOCK))) {\n        localCache.set(key, 'pnpm')\n\n        return 'pnpm'\n      }\n\n      if (existsSync(resolve(dir, YARN_LOCK))) {\n        const packageManager = readFileSync(resolve(dir, YARN_LOCK), {\n          encoding: 'utf-8',\n        }).includes('yarn lockfile v1')\n          ? 'yarn1'\n          : 'yarn'\n\n        localCache.set(key, packageManager)\n\n        return packageManager\n      }\n\n      if (existsSync(resolve(dir, BUN_LOCK))) {\n        localCache.set(key, 'bun')\n\n        return 'bun'\n      }\n\n      if (existsSync(resolve(dir, NPM_LOCK))) {\n        localCache.set(key, 'npm')\n\n        return 'npm'\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Detect the package manager used in the current project.\n *\n * @param cwd current working directory\n * @param deep whether to search in parent directories\n * @returns the type of package manager\n */\nexport const getPackageManager = (\n  cwd = process.cwd(),\n  deep = true,\n): PackageManager =>\n  getPackageManagerSetting(cwd, deep) ||\n  getTypeofLockFile(cwd, deep) ||\n  (isPackageManagerInstalled('pnpm')\n    ? 'pnpm'\n    : isPackageManagerInstalled('yarn')\n      ? 'yarn'\n      : isPackageManagerInstalled('bun')\n        ? 'bun'\n        : 'npm')","import { get } from 'node:https'\nimport semver from 'semver'\nimport type { PackageManager } from './packageManager.js'\nimport { getRegistry } from './registry.js'\n\nexport const getVersion = async (\n  packageManager: PackageManager,\n  packageName: string,\n  tag: 'auto' | 'latest' | 'next' = 'auto',\n  retries = 3,\n): Promise<string> => {\n  const registry = getRegistry(packageManager)\n  const infoUrl = `${registry}-/package/${packageName}/dist-tags`\n\n  const getVersionInfo = async (): Promise<Record<string, string>> =>\n    new Promise((resolve, reject) => {\n      get(infoUrl, (res) => {\n        if (res.statusCode === 200) {\n          let body = ''\n\n          res.on('data', (data: string) => {\n            body += data\n          })\n          res.on('end', () => {\n            resolve(JSON.parse(body) as Record<string, string>)\n          })\n        } else {\n          reject(new Error('Failed to get version info'))\n        }\n      }).on('error', reject)\n    })\n\n  for (let times = 1; times <= retries; times++) {\n    const versionInfo = await getVersionInfo().catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(`Get ${packageName} version failed, [${times}/${retries}]`)\n    })\n\n    if (versionInfo) {\n      const { next, latest } = versionInfo\n\n      return tag === 'latest'\n        ? latest\n        : tag === 'next'\n          ? next\n          : next && semver.gt(next, latest)\n            ? next\n            : latest\n    }\n  }\n\n  throw new Error(\n    `Failed to get ${packageName} version!\\n Can not get version info from ${infoUrl}`,\n  )\n}","/* eslint-disable no-console */\nimport {\n  DEPRECATED_PACKAGES,\n  OFFICIAL_PACKAGES,\n  OFFICIAL_PLUGINS_AND_THEMES_REGEXP,\n  REMOVED_PACKAGES,\n  THIRD_PARTY_PLUGINS,\n  THIRD_PARTY_THEMES,\n  VUE_RELATED_PACKAGES,\n} from '../config/index.js'\nimport { getVersion } from './getVersion.js'\nimport type { PackageManager } from './packageManager.js'\n\nexport const updatePackages = async (\n  packageManager: PackageManager,\n  dependencies: Record<string, string>,\n): Promise<void> => {\n  await Promise.all(\n    Object.keys(dependencies).map(async (dependency) => {\n      if (REMOVED_PACKAGES.includes(dependency)) {\n        console.error(\n          `Removing \"${dependency}\" from your dependencies, as it's no longer maintained.`,\n        )\n        delete dependencies[dependency]\n      } else if (DEPRECATED_PACKAGES.includes(dependency)) {\n        console.error(\n          `\"${dependency}\"is deprecated, please remove it from your dependencies and import \"${dependency.substring(\n            1,\n          )}\" from \"vuepress\" directly.`,\n        )\n\n        dependencies[dependency] = `^${await getVersion(\n          packageManager,\n          dependency,\n          'next',\n        )}`\n      } else if (VUE_RELATED_PACKAGES.includes(dependency)) {\n        dependencies[dependency] = `^${await getVersion(\n          packageManager,\n          dependency,\n          'latest',\n        )}`\n      } else if (OFFICIAL_PACKAGES.includes(dependency)) {\n        dependencies[dependency] = await getVersion(\n          packageManager,\n          dependency,\n          'next',\n        )\n      } else if (OFFICIAL_PLUGINS_AND_THEMES_REGEXP.test(dependency)) {\n        dependencies[dependency] = await getVersion(\n          packageManager,\n          dependency,\n          'next',\n        )\n      } else if (\n        THIRD_PARTY_PLUGINS.test(dependency) ||\n        THIRD_PARTY_THEMES.test(dependency)\n      ) {\n        dependencies[dependency] = await getVersion(\n          packageManager,\n          dependency,\n          'auto',\n        )\n      }\n    }),\n  )\n}"],"mappings":";AAEA,OAAS,aAAAA,MAAiB,qBAC1B,OAAS,cAAAC,EAAY,gBAAAC,EAAc,iBAAAC,MAAqB,UACxD,OAAS,WAAAC,MAAe,YACxB,OAAS,OAAAC,MAAW,MCLb,IAAMC,EAAuB,CAClC,qBACA,oBACA,oBACA,oBACA,oBACA,kBACA,4BACA,oBACA,mBACA,uBACA,cACA,MACA,YACF,EAEaC,EAAoB,CAC/B,yBACA,4BACA,UACF,EAEaC,EACX,gCAEWC,EAAmB,CAAC,mBAAoB,eAAe,EAEvDC,EAAsB,CACjC,gBACA,mBACA,iBACA,qBACA,mBACA,iBACF,EAEaC,EAAsB,4BAEtBC,EAAqB,2BCtClC,OAAS,iBAAAC,MAAqB,cAEvB,IAAMC,EACXD,EAAc,YAAY,GAAG,EAAE,wBAAwB,EAGvD,QCLF,OAAS,aAAAE,MAAiB,qBAG1B,IAAMC,EAAsB,kCAEfC,EAAeC,GAExBA,IAAmB,QACnB,CAACH,EAAU,GAAGG,CAAc,aAAc,CACxC,MAAO,EACT,CAAC,EACE,OAAO,SAAS,EAChB,WAAW,GAAG,EAEVH,EAAU,GAAGG,CAAc,gCAAiC,CACjE,MAAO,EACT,CAAC,EACE,OAAO,SAAS,EAChB,KAAK,EACL,QAAQ,OAAQ,GAAG,EAGtBA,IAAmB,OACnB,CAACH,EAAU,GAAGG,CAAc,aAAc,CACxC,MAAO,EACT,CAAC,EAAE,QAEH,QAAQ,KACN,kFACF,EACOH,EAEL,0BACA,CAAE,MAAO,EAAK,CAChB,EACG,OAAO,SAAS,EAChB,KAAK,EACL,QAAQ,OAAQ,GAAG,GAGjBA,EAAU,GAAGG,CAAc,uBAAwB,CACxD,MAAO,EACT,CAAC,EACE,OAAO,SAAS,EAChB,KAAK,EACL,QAAQ,OAAQ,GAAG,EAGXC,EAAuBD,GAAyC,CAC3E,IAAME,EAAeH,EAAYC,CAAc,EAE3C,0CAA0C,KAAKE,CAAY,IAC7D,QAAQ,MACN,sEACF,EAEIF,IAAmB,OACrBH,EACE,GAAGG,CAAc,kCAAkCF,CAAmB,GACtE,CAAE,MAAO,EAAK,CAChB,EACSE,IAAmB,MAC5BH,EAAU,2BAA2BC,CAAmB,GAAI,CAC1D,MAAO,EACT,CAAC,EAEDD,EACE,GAAGG,CAAc,wBAAwBF,CAAmB,GAC5D,CAAE,MAAO,EAAK,CAChB,EAGN,ECzEA,OAAS,aAAAK,MAAiB,qBAC1B,OAAS,cAAAC,EAAY,gBAAAC,MAAoB,UACzC,OAAS,WAAAC,EAAS,WAAAC,MAAe,YAIjC,IAAMC,EAAc,IAAI,IAClBC,EAAa,IAAI,IAEjBC,EAAiB,eACjBC,EAAW,oBACXC,EAAY,YACZC,EAAY,iBACZC,EAAW,YAEXC,EAAeC,GAA4C,CAC/D,GAAI,CAGF,IAAMC,EAASd,EAAU,GAFba,IAAmB,QAAU,OAASA,CAEnB,aAAc,CAC3C,MAAO,EACT,CAAC,EAED,OAAIA,IAAmB,QACdC,EAAO,OAAO,SAAS,EAAE,WAAW,GAAG,EAEzCA,EAAO,SAAW,CAC3B,MAAQ,CACN,MAAO,EACT,CACF,EAOaC,EACXF,GACY,CACZ,IAAMG,EAAM,UAAUH,CAAc,GAE9BI,EAASZ,EAAY,IAAIW,CAAG,EAElC,OAAIC,IAAW,OAAkBA,EAE7BL,EAAYC,CAAc,GAC5BR,EAAY,IAAIW,EAAK,EAAI,EAElB,IAGF,EACT,EASaE,EAA2B,CACtCC,EAAM,QAAQ,IAAI,EAClBC,EAAO,KACmB,CAC1B,IAAMJ,EAAM,WAAWG,CAAG,GAEpBF,EAASX,EAAW,IAAIU,CAAG,EAEjC,GAAIC,IAAW,OAAW,OAAOA,EAEjC,GAAIhB,EAAWG,EAAQe,EAAKZ,CAAc,CAAC,EAAG,CAC5C,GAAM,CAAE,eAAgBc,CAAuB,EAAI,KAAK,MACtDnB,EAAaE,EAAQe,EAAKZ,CAAc,EAAG,OAAO,CACpD,EAEA,GAAIc,EAAwB,CAC1B,IAAMR,EAAiBQ,EAAuB,MAC5C,GACF,EAAE,CAAC,EAEH,OAAAf,EAAW,IAAIU,EAAKH,CAAc,EAE3BA,CACT,CACF,CAEA,GAAIO,EAAM,CACR,IAAIE,EAAMH,EAEV,KAAOG,IAAQnB,EAAQmB,CAAG,GAGxB,GAFAA,EAAMnB,EAAQmB,CAAG,EAEbrB,EAAWG,EAAQe,EAAKZ,CAAc,CAAC,EAAG,CAC5C,GAAM,CAAE,eAAgBc,CAAuB,EAAI,KAAK,MACtDnB,EAAaE,EAAQe,EAAKZ,CAAc,EAAG,OAAO,CACpD,EAEA,GAAIc,EAAwB,CAC1B,IAAMR,EAAiBQ,EAAuB,MAC5C,GACF,EAAE,CAAC,EAEH,OAAAf,EAAW,IAAIU,EAAKH,CAAc,EAE3BA,CACT,CACF,CAEJ,CAEA,OAAO,IACT,EASaU,EAAoB,CAC/BJ,EAAM,QAAQ,IAAI,EAClBC,EAAO,KACmB,CAC1B,IAAMJ,EAAM,SAASG,CAAG,GAElBF,EAASX,EAAW,IAAIU,CAAG,EAEjC,GAAIC,IAAW,OAAW,OAAOA,EAEjC,GAAIhB,EAAWG,EAAQe,EAAKT,CAAS,CAAC,EACpC,OAAAJ,EAAW,IAAIU,EAAK,MAAM,EAEnB,OAGT,GAAIf,EAAWG,EAAQe,EAAKV,CAAS,CAAC,EAAG,CACvC,IAAMI,EAAiBX,EAAaE,EAAQe,EAAKV,CAAS,EAAG,CAC3D,SAAU,OACZ,CAAC,EAAE,SAAS,kBAAkB,EAC1B,QACA,OAEJ,OAAAH,EAAW,IAAIU,EAAKH,CAAc,EAE3BA,CACT,CAEA,GAAIZ,EAAWG,EAAQe,EAAKR,CAAQ,CAAC,EACnC,OAAAL,EAAW,IAAIU,EAAK,KAAK,EAElB,MAGT,GAAIf,EAAWG,EAAQe,EAAKX,CAAQ,CAAC,EACnC,OAAAF,EAAW,IAAIU,EAAK,KAAK,EAElB,MAGT,GAAII,EAAM,CACR,IAAIE,EAAMH,EAEV,KAAOG,IAAQnB,EAAQmB,CAAG,GAAG,CAG3B,GAFAA,EAAMnB,EAAQmB,CAAG,EAEbrB,EAAWG,EAAQkB,EAAKZ,CAAS,CAAC,EACpC,OAAAJ,EAAW,IAAIU,EAAK,MAAM,EAEnB,OAGT,GAAIf,EAAWG,EAAQkB,EAAKb,CAAS,CAAC,EAAG,CACvC,IAAMI,EAAiBX,EAAaE,EAAQkB,EAAKb,CAAS,EAAG,CAC3D,SAAU,OACZ,CAAC,EAAE,SAAS,kBAAkB,EAC1B,QACA,OAEJ,OAAAH,EAAW,IAAIU,EAAKH,CAAc,EAE3BA,CACT,CAEA,GAAIZ,EAAWG,EAAQkB,EAAKX,CAAQ,CAAC,EACnC,OAAAL,EAAW,IAAIU,EAAK,KAAK,EAElB,MAGT,GAAIf,EAAWG,EAAQkB,EAAKd,CAAQ,CAAC,EACnC,OAAAF,EAAW,IAAIU,EAAK,KAAK,EAElB,KAEX,CACF,CAEA,OAAO,IACT,EASaQ,EAAoB,CAC/BL,EAAM,QAAQ,IAAI,EAClBC,EAAO,KAEPF,EAAyBC,EAAKC,CAAI,GAClCG,EAAkBJ,EAAKC,CAAI,IAC1BL,EAA0B,MAAM,EAC7B,OACAA,EAA0B,MAAM,EAC9B,OACAA,EAA0B,KAAK,EAC7B,MACA,OC9NV,OAAS,OAAAU,MAAW,aACpB,OAAOC,MAAY,SAIZ,IAAMC,EAAa,MACxBC,EACAC,EACAC,EAAkC,OAClCC,EAAU,IACU,CAEpB,IAAMC,EAAU,GADCC,EAAYL,CAAc,CAChB,aAAaC,CAAW,aAE7CK,EAAiB,SACrB,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC/BC,EAAIL,EAAUM,GAAQ,CACpB,GAAIA,EAAI,aAAe,IAAK,CAC1B,IAAIC,EAAO,GAEXD,EAAI,GAAG,OAASE,GAAiB,CAC/BD,GAAQC,CACV,CAAC,EACDF,EAAI,GAAG,MAAO,IAAM,CAClBH,EAAQ,KAAK,MAAMI,CAAI,CAA2B,CACpD,CAAC,CACH,MACEH,EAAO,IAAI,MAAM,4BAA4B,CAAC,CAElD,CAAC,EAAE,GAAG,QAASA,CAAM,CACvB,CAAC,EAEH,QAASK,EAAQ,EAAGA,GAASV,EAASU,IAAS,CAC7C,IAAMC,EAAc,MAAMR,EAAe,EAAE,MAAM,IAAM,CAErD,QAAQ,IAAI,OAAOL,CAAW,qBAAqBY,CAAK,IAAIV,CAAO,GAAG,CACxE,CAAC,EAED,GAAIW,EAAa,CACf,GAAM,CAAE,KAAAC,EAAM,OAAAC,CAAO,EAAIF,EAEzB,OAAOZ,IAAQ,SACXc,EACAd,IAAQ,QAENa,GAAQE,EAAO,GAAGF,EAAMC,CAAM,EAD9BD,EAGEC,CACV,CACF,CAEA,MAAM,IAAI,MACR,iBAAiBf,CAAW;AAAA,iCAA6CG,CAAO,EAClF,CACF,ECzCO,IAAMc,EAAiB,MAC5BC,EACAC,IACkB,CAClB,MAAM,QAAQ,IACZ,OAAO,KAAKA,CAAY,EAAE,IAAI,MAAOC,GAAe,CAC9CC,EAAiB,SAASD,CAAU,GACtC,QAAQ,MACN,aAAaA,CAAU,yDACzB,EACA,OAAOD,EAAaC,CAAU,GACrBE,EAAoB,SAASF,CAAU,GAChD,QAAQ,MACN,IAAIA,CAAU,uEAAuEA,EAAW,UAC9F,CACF,CAAC,6BACH,EAEAD,EAAaC,CAAU,EAAI,IAAI,MAAMG,EACnCL,EACAE,EACA,MACF,CAAC,IACQI,EAAqB,SAASJ,CAAU,EACjDD,EAAaC,CAAU,EAAI,IAAI,MAAMG,EACnCL,EACAE,EACA,QACF,CAAC,GACQK,EAAkB,SAASL,CAAU,EAC9CD,EAAaC,CAAU,EAAI,MAAMG,EAC/BL,EACAE,EACA,MACF,EACSM,EAAmC,KAAKN,CAAU,EAC3DD,EAAaC,CAAU,EAAI,MAAMG,EAC/BL,EACAE,EACA,MACF,GAEAO,EAAoB,KAAKP,CAAU,GACnCQ,EAAmB,KAAKR,CAAU,KAElCD,EAAaC,CAAU,EAAI,MAAMG,EAC/BL,EACAE,EACA,MACF,EAEJ,CAAC,CACH,CACF,ENrDA,IAAMS,EAAMC,EAAI,WAAW,EAE3BD,EACG,QAAQ,QAAS,sBAAsB,EACvC,MACC,uEACF,EACC,QAAQ,MAAM,EAEd,OAAO,MAAOE,EAAoB,KAA8B,CAC/D,QAAQ,IAAI,iBAAiB,EAC7B,IAAMC,EAAMC,EAAQ,QAAQ,IAAI,EAAGF,CAAS,EACtCG,EAAcD,EAAQD,EAAK,cAAc,EAE/C,GAAI,CAACG,EAAWD,CAAW,EACzB,OAAO,IAAI,MAAM,4BAA4BH,GAAa,aAAa,EAAE,EAE3E,IAAMK,EAAiBC,EAAkB,EAEzCC,EAAoBF,CAAc,EAElC,IAAMG,EAAUC,EAAaN,EAAa,CAAE,SAAU,OAAQ,CAAC,EAEzDO,EAAqB,KAAK,MAAMF,CAAO,EAQ7C,MAAM,QAAQ,IAAI,CAChBE,EAAmB,aACfC,EAAeN,EAAgBK,EAAmB,YAAY,EAC9D,QAAQ,QAAQ,EACpBA,EAAmB,gBACfC,EAAeN,EAAgBK,EAAmB,eAAe,EACjE,QAAQ,QAAQ,CACtB,CAAC,EAEDE,EACET,EACA,GAAG,KAAK,UAAUO,EAAoB,KAAM,CAAC,CAAC;AAAA,CAChD,EAEA,QAAQ,KAAK,iBAAiB,EAE9BG,EAAU,GAAGR,CAAc,WAAY,CACrC,MAAO,GACP,MAAO,SACT,CAAC,EAED,QAAQ,KAAK,mBAAmB,EAEhCQ,EACER,IAAmB,OACf,cACAA,IAAmB,QACjB,eACAA,IAAmB,OACjB,UACAA,IAAmB,MACjB,aACA,aACV,CACE,MAAO,GACP,MAAO,SACT,CACF,CACF,CAAC,EAEHP,EAAI,KAAK,IAAM,CACb,CACE,MACE,wEACF,KAAM,+BACR,CACF,CAAC,EAEDA,EAAI,QAAQgB,CAAO,EAEnBhB,EAAI,MAAM","names":["spawnSync","existsSync","readFileSync","writeFileSync","resolve","cac","VUE_RELATED_PACKAGES","OFFICIAL_PACKAGES","OFFICIAL_PLUGINS_AND_THEMES_REGEXP","REMOVED_PACKAGES","DEPRECATED_PACKAGES","THIRD_PARTY_PLUGINS","THIRD_PARTY_THEMES","createRequire","VERSION","spawnSync","NPM_MIRROR_REGISTRY","getRegistry","packageManager","checkTaobaoRegistry","userRegistry","spawnSync","existsSync","readFileSync","dirname","resolve","globalCache","localCache","PACKAGE_CONFIG","NPM_LOCK","YARN_LOCK","PNPM_LOCK","BUN_LOCK","isInstalled","packageManager","result","isPackageManagerInstalled","key","status","getPackageManagerSetting","cwd","deep","packageManagerSettings","dir","getTypeofLockFile","getPackageManager","get","semver","getVersion","packageManager","packageName","tag","retries","infoUrl","getRegistry","getVersionInfo","resolve","reject","get","res","body","data","times","versionInfo","next","latest","semver","updatePackages","packageManager","dependencies","dependency","REMOVED_PACKAGES","DEPRECATED_PACKAGES","getVersion","VUE_RELATED_PACKAGES","OFFICIAL_PACKAGES","OFFICIAL_PLUGINS_AND_THEMES_REGEXP","THIRD_PARTY_PLUGINS","THIRD_PARTY_THEMES","cli","cac","targetDir","dir","resolve","packageJSON","existsSync","packageManager","getPackageManager","checkTaobaoRegistry","content","readFileSync","packageJSONContent","updatePackages","writeFileSync","spawnSync","VERSION"]}