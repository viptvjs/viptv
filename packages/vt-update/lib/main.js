#!/usr/bin/env node
import{spawnSync as L}from"node:child_process";import{existsSync as X,readFileSync as q,writeFileSync as z}from"node:fs";import{resolve as K}from"node:path";import{cac as Q}from"cac";var A=["@vue/compiler-core","@vue/compiler-dom","@vue/compiler-sfc","@vue/compiler-ssr","@vue/devtools-api","@vue/reactivity","@vue/reactivity-transform","@vue/runtime-core","@vue/runtime-dom","@vue/server-renderer","@vue/shared","vue","vue-router"],_=["@vuepress/bundler-vite","@vuepress/bundler-webpack","vuepress"],h=/^@vuepress\/(?:plugin|theme)-/,$=["vuepress-webpack","vuepress-vite"],M=["@vuepress/cli","@vuepress/client","@vuepress/core","@vuepress/markdown","@vuepress/shared","@vuepress/utils"],I=/^(@.*\/)?vuepress-plugin-/,C=/^(@.*\/)?vuepress-theme-/;import{createRequire as U}from"node:module";var O=U(import.meta.url)("vt-update/package.json").version;import{spawnSync as c}from"node:child_process";var S="https://registry.npmmirror.com/",R=e=>e==="yarn"&&!c(`${e} --version`,{shell:!0}).stdout.toString().startsWith("1")?c(`${e} config get npmRegistryServer`,{shell:!0}).stdout.toString().trim().replace(/\/?$/,"/"):e==="bun"&&!c(`${e} --version`,{shell:!0}).status?(console.warn("bun does not support get registry at the time, using npm global registry instead"),c("npm config get registry",{shell:!0}).stdout.toString().trim().replace(/\/?$/,"/")):c(`${e} config get registry`,{shell:!0}).stdout.toString().trim().replace(/\/?$/,"/"),T=e=>{let t=R(e);/https:\/\/registry\.npm\.taobao\.org\/?/.test(t)&&(console.error("npm.taobao.org is no longer available, resetting it to npmmirror.com"),e==="yarn"?c(`${e} config set npmRegistryServer  ${S}`,{shell:!0}):e==="bun"?c(`npm config set registry ${S}`,{shell:!0}):c(`${e} config set registry ${S}`,{shell:!0}))};import{spawnSync as j}from"node:child_process";import{existsSync as u,readFileSync as y}from"node:fs";import{dirname as k,resolve as i}from"node:path";var w=new Map,a=new Map,P="package.json",N="package-lock.json",d="yarn.lock",G="pnpm-lock.yaml",D="bun.lockb",H=e=>{try{let r=j(`${e==="yarn1"?"yarn":e} --version`,{shell:!0});return e==="yarn1"?r.stdout.toString().startsWith("1"):r.status===0}catch{return!1}},b=e=>{let t=`global:${e}`,r=w.get(t);return r!==void 0?r:H(e)?(w.set(t,!0),!0):!1},J=(e=process.cwd(),t=!0)=>{let r=`package:${e}`,n=a.get(r);if(n!==void 0)return n;if(u(i(e,P))){let{packageManager:s}=JSON.parse(y(i(e,P),"utf-8"));if(s){let o=s.split("@")[0];return a.set(r,o),o}}if(t){let s=e;for(;s!==k(s);)if(s=k(s),u(i(e,P))){let{packageManager:o}=JSON.parse(y(i(e,P),"utf-8"));if(o){let v=o.split("@")[0];return a.set(r,v),v}}}return null},Y=(e=process.cwd(),t=!0)=>{let r=`local:${e}`,n=a.get(r);if(n!==void 0)return n;if(u(i(e,G)))return a.set(r,"pnpm"),"pnpm";if(u(i(e,d))){let s=y(i(e,d),{encoding:"utf-8"}).includes("yarn lockfile v1")?"yarn1":"yarn";return a.set(r,s),s}if(u(i(e,D)))return a.set(r,"bun"),"bun";if(u(i(e,N)))return a.set(r,"npm"),"npm";if(t){let s=e;for(;s!==k(s);){if(s=k(s),u(i(s,G)))return a.set(r,"pnpm"),"pnpm";if(u(i(s,d))){let o=y(i(s,d),{encoding:"utf-8"}).includes("yarn lockfile v1")?"yarn1":"yarn";return a.set(r,o),o}if(u(i(s,D)))return a.set(r,"bun"),"bun";if(u(i(s,N)))return a.set(r,"npm"),"npm"}}return null},F=(e=process.cwd(),t=!0)=>J(e,t)||Y(e,t)||(b("pnpm")?"pnpm":b("yarn")?"yarn":b("bun")?"bun":"npm");import{get as B}from"node:https";import W from"semver";var g=async(e,t,r="auto",n=3)=>{let o=`${R(e)}-/package/${t}/dist-tags`,v=async()=>new Promise((m,f)=>{B(o,p=>{if(p.statusCode===200){let l="";p.on("data",V=>{l+=V}),p.on("end",()=>{m(JSON.parse(l))})}else f(new Error("Failed to get version info"))}).on("error",f)});for(let m=1;m<=n;m++){let f=await v().catch(()=>{console.log(`Get ${t} version failed, [${m}/${n}]`)});if(f){let{next:p,latest:l}=f;return r==="latest"?l:r==="next"||p&&W.gt(p,l)?p:l}}throw new Error(`Failed to get ${t} version!
 Can not get version info from ${o}`)};var x=async(e,t)=>{await Promise.all(Object.keys(t).map(async r=>{$.includes(r)?(console.error(`Removing "${r}" from your dependencies, as it's no longer maintained.`),delete t[r]):M.includes(r)?(console.error(`"${r}"is deprecated, please remove it from your dependencies and import "${r.substring(1)}" from "vuepress" directly.`),t[r]=`^${await g(e,r,"next")}`):A.includes(r)?t[r]=`^${await g(e,r,"latest")}`:_.includes(r)?t[r]=await g(e,r,"next"):h.test(r)?t[r]=await g(e,r,"next"):(I.test(r)||C.test(r))&&(t[r]=await g(e,r,"auto"))}))};var E=Q("vt-update");E.command("[dir]","Update VIPTV project").usage("pnpm dlx vt-update [dir] / npx vt-update [dir] / bunx vt-update [dir]").example("docs").action(async(e="")=>{console.log("Bumping deps...");let t=K(process.cwd(),e),r=K(t,"package.json");if(!X(r))return new Error(`No package.json found in ${e||"current dir"}`);let n=F();T(n);let s=q(r,{encoding:"utf-8"}),o=JSON.parse(s);await Promise.all([o.dependencies?x(n,o.dependencies):Promise.resolve(),o.devDependencies?x(n,o.devDependencies):Promise.resolve()]),z(r,`${JSON.stringify(o,null,2)}
`),console.info("Install deps..."),L(`${n} install`,{shell:!0,stdio:"inherit"}),console.info("Upgrading deps..."),L(n==="pnpm"?"pnpm update":n==="yarn1"?"yarn upgrade":n==="yarn"?"yarn up":n==="bun"?"bun update":"npm update",{shell:!0,stdio:"inherit"})});E.help(()=>[{title:"pnpm dlx vt-update [dir] / npx vt-update [dir] / bunx vt-update [dir]",body:"Update VIPTV project in [dir]"}]);E.version(O);E.parse();
//# sourceMappingURL=main.js.map