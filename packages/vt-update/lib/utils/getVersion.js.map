{"version":3,"file":"getVersion.js","sourceRoot":"","sources":["../../src/utils/getVersion.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,YAAY,CAAA;AAChC,OAAO,MAAM,MAAM,QAAQ,CAAA;AAE3B,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAA;AAE3C,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAC7B,cAA8B,EAC9B,WAAmB,EACnB,MAAkC,MAAM,EACxC,OAAO,GAAG,CAAC,EACM,EAAE;IACnB,MAAM,QAAQ,GAAG,WAAW,CAAC,cAAc,CAAC,CAAA;IAC5C,MAAM,OAAO,GAAG,GAAG,QAAQ,aAAa,WAAW,YAAY,CAAA;IAE/D,MAAM,cAAc,GAAG,GAAoC,EAAE,CAC3D,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9B,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;YACnB,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;gBAC3B,IAAI,IAAI,GAAG,EAAE,CAAA;gBAEb,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAA;gBACxC,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;oBACjB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAA2B,CAAC,CAAA;gBACrD,CAAC,CAAC,CAAA;YACJ,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAA;YACjD,CAAC;QACH,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;IACxB,CAAC,CAAC,CAAA;IAEJ,IAAI,KAAK,GAAG,CAAC,CAAA;IAEb,GAAG,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,cAAc,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE;YACpD,OAAO,CAAC,GAAG,CAAC,OAAO,WAAW,qBAAqB,KAAK,IAAI,OAAO,GAAG,CAAC,CAAA;QACzE,CAAC,CAAC,CAAA;QAEF,IAAI,WAAW,EAAE,CAAC;YAChB,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,WAAW,CAAA;YAEpC,OAAO,GAAG,KAAK,QAAQ;gBACrB,CAAC,CAAC,MAAM;gBACR,CAAC,CAAC,GAAG,KAAK,MAAM;oBACd,CAAC,CAAC,IAAI;oBACN,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;wBAC/B,CAAC,CAAC,IAAI;wBACN,CAAC,CAAC,MAAM,CAAA;QAChB,CAAC;QAED,KAAK,EAAE,CAAA;IACT,CAAC,QAAQ,KAAK,IAAI,OAAO,EAAC;IAE1B,MAAM,IAAI,KAAK,CACb,iBAAiB,WAAW,6CAA6C,OAAO,EAAE,CACnF,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { get } from 'node:https'\nimport semver from 'semver'\nimport type { PackageManager } from './packageManager.js'\nimport { getRegistry } from './registry.js'\n\nexport const getVersion = async (\n  packageManager: PackageManager,\n  packageName: string,\n  tag: 'latest' | 'next' | 'auto' = 'auto',\n  retries = 3,\n): Promise<string> => {\n  const registry = getRegistry(packageManager)\n  const infoUrl = `${registry}-/package/${packageName}/dist-tags`\n\n  const getVersionInfo = (): Promise<Record<string, string>> =>\n    new Promise((resolve, reject) => {\n      get(infoUrl, (res) => {\n        if (res.statusCode === 200) {\n          let body = ''\n\n          res.on('data', (data) => (body += data))\n          res.on('end', () => {\n            resolve(JSON.parse(body) as Record<string, string>)\n          })\n        } else {\n          reject(new Error('Failed to get version info'))\n        }\n      }).on('error', reject)\n    })\n\n  let times = 1\n\n  do {\n    const versionInfo = await getVersionInfo().catch(() => {\n      console.log(`Get ${packageName} version failed, [${times}/${retries}]`)\n    })\n\n    if (versionInfo) {\n      const { next, latest } = versionInfo\n\n      return tag === 'latest'\n        ? latest\n        : tag === 'next'\n          ? next\n          : next && semver.gt(next, latest)\n            ? next\n            : latest\n    }\n\n    times++\n  } while (times <= retries)\n\n  throw new Error(\n    `Failed to get ${packageName} version!\\n Can not get version info from ${infoUrl}`,\n  )\n}"]}