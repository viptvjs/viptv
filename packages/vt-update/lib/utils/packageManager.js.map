{"version":3,"file":"packageManager.js","sourceRoot":"","sources":["../../src/utils/packageManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { spawnSync } from 'node:child_process'\nimport { existsSync, readFileSync } from 'node:fs'\nimport { dirname, resolve } from 'node:path'\n\nexport type PackageManager = 'bun' | 'npm' | 'pnpm' | 'yarn' | 'yarn1'\n\nconst globalCache = new Map<string, boolean>()\nconst localCache = new Map<string, PackageManager>()\n\nconst PACKAGE_CONFIG = 'package.json'\nconst NPM_LOCK = 'package-lock.json'\nconst YARN_LOCK = 'yarn.lock'\nconst PNPM_LOCK = 'pnpm-lock.yaml'\nconst BUN_LOCK = 'bun.lockb'\n\nconst isInstalled = (packageManager: PackageManager): boolean => {\n  try {\n    const bin = packageManager === 'yarn1' ? 'yarn' : packageManager\n\n    const result = spawnSync(`${bin} --version`, {\n      shell: true,\n    })\n\n    if (packageManager === 'yarn1')\n      return result.stdout.toString().startsWith('1')\n\n    return result.status === 0\n  } catch {\n    return false\n  }\n}\n\n/**\n * Check if a package manager is installed globally.\n *\n * @param packageManager package manager\n */\nexport const isPackageManagerInstalled = (\n  packageManager: PackageManager,\n): boolean => {\n  const key = `global:${packageManager}`\n\n  const status = globalCache.get(key)\n\n  if (status !== undefined) return status\n\n  if (isInstalled(packageManager)) {\n    globalCache.set(key, true)\n\n    return true\n  }\n\n  return false\n}\n\n/**\n * Get package manager setting in package.json\n *\n * @param cwd current working directory\n * @param deep whether to search in parent directories\n * @returns the type of lock file\n */\nexport const getPackageManagerSetting = (\n  cwd = process.cwd(),\n  deep = true,\n): PackageManager | null => {\n  const key = `package:${cwd}`\n\n  const status = localCache.get(key)\n\n  if (status !== undefined) return status\n\n  if (existsSync(resolve(cwd, PACKAGE_CONFIG))) {\n    const { packageManager: packageManagerSettings } = JSON.parse(\n      readFileSync(resolve(cwd, PACKAGE_CONFIG), 'utf-8'),\n    ) as Record<string, unknown> & { packageManager?: string }\n\n    if (packageManagerSettings) {\n      const packageManager = packageManagerSettings.split(\n        '@',\n      )[0] as PackageManager\n\n      localCache.set(key, packageManager)\n\n      return packageManager\n    }\n  }\n\n  if (deep) {\n    let dir = cwd\n\n    while (dir !== dirname(dir)) {\n      dir = dirname(dir)\n\n      if (existsSync(resolve(cwd, PACKAGE_CONFIG))) {\n        const { packageManager: packageManagerSettings } = JSON.parse(\n          readFileSync(resolve(cwd, PACKAGE_CONFIG), 'utf-8'),\n        ) as Record<string, unknown> & { packageManager?: string }\n\n        if (packageManagerSettings) {\n          const packageManager = packageManagerSettings.split(\n            '@',\n          )[0] as PackageManager\n\n          localCache.set(key, packageManager)\n\n          return packageManager\n        }\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Get the type of lock file.\n *\n * @param cwd current working directory\n * @param deep whether to search in parent directories\n * @returns the type of lock file\n */\nexport const getTypeofLockFile = (\n  cwd = process.cwd(),\n  deep = true,\n): PackageManager | null => {\n  const key = `local:${cwd}`\n\n  const status = localCache.get(key)\n\n  if (status !== undefined) return status\n\n  if (existsSync(resolve(cwd, PNPM_LOCK))) {\n    localCache.set(key, 'pnpm')\n\n    return 'pnpm'\n  }\n\n  if (existsSync(resolve(cwd, YARN_LOCK))) {\n    const packageManager = readFileSync(resolve(cwd, YARN_LOCK), {\n      encoding: 'utf-8',\n    }).includes('yarn lockfile v1')\n      ? 'yarn1'\n      : 'yarn'\n\n    localCache.set(key, packageManager)\n\n    return packageManager\n  }\n\n  if (existsSync(resolve(cwd, BUN_LOCK))) {\n    localCache.set(key, 'bun')\n\n    return 'bun'\n  }\n\n  if (existsSync(resolve(cwd, NPM_LOCK))) {\n    localCache.set(key, 'npm')\n\n    return 'npm'\n  }\n\n  if (deep) {\n    let dir = cwd\n\n    while (dir !== dirname(dir)) {\n      dir = dirname(dir)\n\n      if (existsSync(resolve(dir, PNPM_LOCK))) {\n        localCache.set(key, 'pnpm')\n\n        return 'pnpm'\n      }\n\n      if (existsSync(resolve(dir, YARN_LOCK))) {\n        const packageManager = readFileSync(resolve(dir, YARN_LOCK), {\n          encoding: 'utf-8',\n        }).includes('yarn lockfile v1')\n          ? 'yarn1'\n          : 'yarn'\n\n        localCache.set(key, packageManager)\n\n        return packageManager\n      }\n\n      if (existsSync(resolve(dir, BUN_LOCK))) {\n        localCache.set(key, 'bun')\n\n        return 'bun'\n      }\n\n      if (existsSync(resolve(dir, NPM_LOCK))) {\n        localCache.set(key, 'npm')\n\n        return 'npm'\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Detect the package manager used in the current project.\n *\n * @param cwd current working directory\n * @param deep whether to search in parent directories\n * @returns the type of package manager\n */\nexport const getPackageManager = (\n  cwd = process.cwd(),\n  deep = true,\n): PackageManager =>\n  getPackageManagerSetting(cwd, deep) ||\n  getTypeofLockFile(cwd, deep) ||\n  (isPackageManagerInstalled('pnpm')\n    ? 'pnpm'\n    : isPackageManagerInstalled('yarn')\n      ? 'yarn'\n      : isPackageManagerInstalled('bun')\n        ? 'bun'\n        : 'npm')"]}